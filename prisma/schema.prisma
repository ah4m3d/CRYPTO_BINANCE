// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  brokerApiKey    String?
  brokerApiSecret String?
  brokerUserId    String?
  balance         Float     @default(100000.0) // Starting balance of â‚¹1,00,000
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  watchlists Watchlist[]
  trades     Trade[]
  rules      TradingRule[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String?
  buyPrice  Float?
  sellPrice Float?
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
}

model Trade {
  id              String      @id @default(cuid())
  userId          String
  symbol          String
  type            TradeType
  quantity        Int
  price           Float
  total           Float
  brokerOrderId   String?     // Order ID from broker
  status          TradeStatus @default(PENDING)
  executedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TradingRule {
  id        String          @id @default(cuid())
  userId    String
  symbol    String
  type      TradeType
  condition RuleCondition
  value     Float
  isActive  Boolean         @default(true)
  triggered Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StockPrice {
  id            String   @id @default(cuid())
  symbol        String   @unique
  name          String
  price         Float
  change        Float
  changePercent Float
  volume        Int
  marketCap     Float?
  lastUpdated   DateTime @default(now())
}

enum TradeType {
  BUY
  SELL
}

enum TradeStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum RuleCondition {
  PRICE_BELOW
  PRICE_ABOVE
  PERCENT_CHANGE_UP
  PERCENT_CHANGE_DOWN
}
